{"ast":null,"code":"import { GET_USERS, LOGIN_USER, AUTHENTICATION_ERROR, AUTHENTICATED, LOGIN_AUTHENTICATED, SAVE_USER, API_URL, SUCCESS_MESSAGE, CLEAR_MESSAGE } from \"./actionTypes\";\nimport axios from \"axios\"; // const addUser = (newUser) => {\n//     return { type: ADD_USER, newUser: newUser }\n// };\n//  export {addUser}\n\nexport function clearMessage() {\n  return {\n    type: CLEAR_MESSAGE,\n    error: '',\n    success: ''\n  };\n}\nexport function saveUser(user) {\n  return {\n    type: SAVE_USER,\n    currentUser: user\n  };\n}\nexport function getUsers(users) {\n  return {\n    type: GET_USERS,\n    users: users\n  };\n}\nexport const axiosGetUsers = users => {\n  return dispatch => {\n    axios.get(`${API_URL}/users`, {\n      headers: {\n        Authorization: window.localStorage.getItem('token')\n      }\n    }).then(response => {\n      dispatch(getUsers(response.data));\n    }).catch(e => console.log(e));\n  };\n};\nexport const getProfileFetch = () => {\n  return dispatch => {\n    const token = localStorage.token;\n\n    if (token) {\n      return fetch(`${API_URL}/users`, {\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Authorization': token\n        }\n      }).then(resp => resp.json()).then(data => {\n        if (data.message) {\n          // An error will occur if the token is invalid.\n          // If this happens, you may want to remove the invalid token.\n          localStorage.removeItem(\"token\");\n        } else {\n          dispatch(loginUser(data.user));\n        }\n      });\n    }\n  };\n};\nexport const loginUser = userInfo => {\n  return {\n    type: LOGIN_AUTHENTICATED,\n    currentUser: {\n      userInfo\n    },\n    success: 'Login Successful'\n  };\n};\nexport const userLoginFetch = user => {\n  // const { setAuthTokens } = useAuth();\n  // const [isLoggedIn, setLoggedIn] = useState(false);\n  return dispatch => {\n    return fetch(`${API_URL}/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: window.localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(resp => resp.json()).then(data => {\n      console.log(data);\n\n      if (data.failure) {\n        dispatch(authError(data.failure));\n      } else {\n        localStorage.setItem(\"token\", data.jwt).history.push('/welcome');\n        dispatch(loginUser(data.user));\n        dispatch(loginSuccess(data.success));\n      }\n    });\n  };\n};\nexport const authError = error => {\n  return {\n    type: AUTHENTICATION_ERROR,\n    error: error,\n    success: ''\n  };\n};\nexport const loginSuccess = success => {\n  return {\n    type: SUCCESS_MESSAGE,\n    success: success\n  };\n};\nexport const authenticated = () => {\n  return {\n    type: AUTHENTICATED\n  };\n};\nexport const userPostFetch = user => {\n  return dispatch => {\n    return fetch(`${API_URL}users`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: window.localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(resp => resp.json()).then(data => {\n      if (data.message) {\n        console.warn(data.message);\n      } else {\n        localStorage.setItem(\"token\", data.jwt);\n        dispatch(saveUser(data.user));\n        dispatch(loginUser(data.user));\n      }\n    });\n  };\n}; // const loginUser = userObj => ({\n//     type: 'LOGIN_USER',\n//     payload: userObj\n// })","map":{"version":3,"sources":["/Users/tonyabraham/Development/code/Projects/covid-19-buddy/covid-19-buddy/fe/covid-19-buddy-fe/src/actions/user.js"],"names":["GET_USERS","LOGIN_USER","AUTHENTICATION_ERROR","AUTHENTICATED","LOGIN_AUTHENTICATED","SAVE_USER","API_URL","SUCCESS_MESSAGE","CLEAR_MESSAGE","axios","clearMessage","type","error","success","saveUser","user","currentUser","getUsers","users","axiosGetUsers","dispatch","get","headers","Authorization","window","localStorage","getItem","then","response","data","catch","e","console","log","getProfileFetch","token","fetch","method","Accept","resp","json","message","removeItem","loginUser","userInfo","userLoginFetch","body","JSON","stringify","failure","authError","setItem","jwt","history","push","loginSuccess","authenticated","userPostFetch","warn"],"mappings":"AAAA,SACIA,SADJ,EAEIC,UAFJ,EAGIC,oBAHJ,EAIIC,aAJJ,EAKIC,mBALJ,EAMIC,SANJ,EAOIC,OAPJ,EAQIC,eARJ,EAQqBC,aARrB,QASO,eATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,GAAwB;AAC3B,SAAO;AAACC,IAAAA,IAAI,EAAEH,aAAP;AAAsBI,IAAAA,KAAK,EAAE,EAA7B;AAAiCC,IAAAA,OAAO,EAAE;AAA1C,GAAP;AAEH;AAED,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AAC3B,SAAO;AAACJ,IAAAA,IAAI,EAAEN,SAAP;AAAkBW,IAAAA,WAAW,EAAED;AAA/B,GAAP;AAEH;AACA,OAAO,SAASE,QAAT,CAAkBC,KAAlB,EAAyB;AAC5B,SAAO;AAAEP,IAAAA,IAAI,EAAEX,SAAR;AAAmBkB,IAAAA,KAAK,EAAEA;AAA1B,GAAP;AACH;AACF,OAAO,MAAMC,aAAa,GAAID,KAAD,IAAW;AACpC,SAAOE,QAAQ,IAAI;AACfX,IAAAA,KAAK,CAACY,GAAN,CAAW,GAAEf,OAAQ,QAArB,EAA6B;AAACgB,MAAAA,OAAO,EAAgB;AAAGC,QAAAA,aAAa,EAAEC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B;AAAlB;AAAxB,KAA7B,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACdR,MAAAA,QAAQ,CAACH,QAAQ,CAACW,QAAQ,CAACC,IAAV,CAAT,CAAR;AACH,KAJL,EAKKC,KALL,CAKWC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CALhB;AAMH,GAPD;AAQH,CATM;AAUP,OAAO,MAAMG,eAAe,GAAG,MAAM;AACjC,SAAOd,QAAQ,IAAI;AACf,UAAMe,KAAK,GAAGV,YAAY,CAACU,KAA3B;;AACA,QAAIA,KAAJ,EAAW;AACP,aAAOC,KAAK,CAAE,GAAE9B,OAAQ,QAAZ,EAAqB;AAC7B+B,QAAAA,MAAM,EAAE,KADqB;AAE7Bf,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAELgB,UAAAA,MAAM,EAAE,kBAFH;AAGL,2BAAiBH;AAHZ;AAFoB,OAArB,CAAL,CAQFR,IARE,CAQGY,IAAI,IAAIA,IAAI,CAACC,IAAL,EARX,EASFb,IATE,CASGE,IAAI,IAAI;AACV,YAAIA,IAAI,CAACY,OAAT,EAAkB;AACd;AACA;AACAhB,UAAAA,YAAY,CAACiB,UAAb,CAAwB,OAAxB;AACH,SAJD,MAIO;AACHtB,UAAAA,QAAQ,CAACuB,SAAS,CAACd,IAAI,CAACd,IAAN,CAAV,CAAR;AACH;AACJ,OAjBE,CAAP;AAkBH;AACJ,GAtBD;AAuBH,CAxBM;AAyBP,OAAO,MAAM4B,SAAS,GAAIC,QAAD,IAAc;AACnC,SAAO;AAACjC,IAAAA,IAAI,EAAEP,mBAAP;AAA4BY,IAAAA,WAAW,EAAE;AAAC4B,MAAAA;AAAD,KAAzC;AAAqD/B,IAAAA,OAAO,EAAE;AAA9D,GAAP;AAGH,CAJM;AAOP,OAAO,MAAMgC,cAAc,GAAG9B,IAAI,IAAI;AAClC;AACA;AAEA,SAAOK,QAAQ,IAAI;AACf,WAAOgB,KAAK,CAAE,GAAE9B,OAAQ,QAAZ,EAAqB;AAC7B+B,MAAAA,MAAM,EAAE,MADqB;AAE7Bf,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELgB,QAAAA,MAAM,EAAE,kBAFH;AAGLf,QAAAA,aAAa,EAAEC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B;AAHV,OAFoB;AAO7BoB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACjC,QAAAA;AAAD,OAAf;AAPuB,KAArB,CAAL,CASFY,IATE,CASGY,IAAI,IAAIA,IAAI,CAACC,IAAL,EATX,EAUFb,IAVE,CAUGE,IAAI,IAAI;AACVG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,UAAIA,IAAI,CAACoB,OAAT,EAAkB;AAClB7B,QAAAA,QAAQ,CAAC8B,SAAS,CAACrB,IAAI,CAACoB,OAAN,CAAV,CAAR;AAEC,OAHD,MAGO;AACHxB,QAAAA,YAAY,CAAC0B,OAAb,CAAqB,OAArB,EAA8BtB,IAAI,CAACuB,GAAnC,EACCC,OADD,CACSC,IADT,CACc,UADd;AAC8ClC,QAAAA,QAAQ,CAACuB,SAAS,CAACd,IAAI,CAACd,IAAN,CAAV,CAAR;AAC9CK,QAAAA,QAAQ,CAACmC,YAAY,CAAC1B,IAAI,CAAChB,OAAN,CAAb,CAAR;AACH;AACJ,KApBE,CAAP;AAsBH,GAvBD;AAyBH,CA7BM;AA8BP,OAAO,MAAMqC,SAAS,GAAGtC,KAAK,IAAI;AAC7B,SAAO;AAACD,IAAAA,IAAI,EAAET,oBAAP;AAA6BU,IAAAA,KAAK,EAAEA,KAApC;AAA2CC,IAAAA,OAAO,EAAE;AAApD,GAAP;AACJ,CAFM;AAIP,OAAO,MAAM0C,YAAY,GAAG1C,OAAO,IAAI;AACnC,SAAO;AAACF,IAAAA,IAAI,EAAEJ,eAAP;AAAwBM,IAAAA,OAAO,EAAEA;AAAjC,GAAP;AACH,CAFM;AAGP,OAAO,MAAM2C,aAAa,GAAG,MAAM;AAC9B,SAAO;AAAC7C,IAAAA,IAAI,EAAER;AAAP,GAAP;AACJ,CAFM;AAGP,OAAO,MAAMsD,aAAa,GAAG1C,IAAI,IAAI;AACjC,SAAOK,QAAQ,IAAI;AACf,WAAOgB,KAAK,CAAE,GAAE9B,OAAQ,OAAZ,EAAoB;AAC5B+B,MAAAA,MAAM,EAAE,MADoB;AAE5Bf,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELgB,QAAAA,MAAM,EAAE,kBAFH;AAGLf,QAAAA,aAAa,EAAEC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B;AAHV,OAFmB;AAQ5BoB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACjC,QAAAA;AAAD,OAAf;AARsB,KAApB,CAAL,CAUFY,IAVE,CAUGY,IAAI,IAAIA,IAAI,CAACC,IAAL,EAVX,EAWFb,IAXE,CAWGE,IAAI,IAAI;AACV,UAAIA,IAAI,CAACY,OAAT,EAAkB;AACfT,QAAAA,OAAO,CAAC0B,IAAR,CAAa7B,IAAI,CAACY,OAAlB;AACF,OAFD,MAEO;AACHhB,QAAAA,YAAY,CAAC0B,OAAb,CAAqB,OAArB,EAA8BtB,IAAI,CAACuB,GAAnC;AACAhC,QAAAA,QAAQ,CAACN,QAAQ,CAACe,IAAI,CAACd,IAAN,CAAT,CAAR;AACAK,QAAAA,QAAQ,CAACuB,SAAS,CAACd,IAAI,CAACd,IAAN,CAAV,CAAR;AACH;AACJ,KAnBE,CAAP;AAoBH,GArBD;AAsBH,CAvBM,C,CAyBP;AACA;AACA;AACA","sourcesContent":["import {\n    GET_USERS,\n    LOGIN_USER,\n    AUTHENTICATION_ERROR,\n    AUTHENTICATED,\n    LOGIN_AUTHENTICATED,\n    SAVE_USER,\n    API_URL,\n    SUCCESS_MESSAGE, CLEAR_MESSAGE\n} from \"./actionTypes\";\nimport axios from \"axios\";\n\n// const addUser = (newUser) => {\n//     return { type: ADD_USER, newUser: newUser }\n// };\n//  export {addUser}\nexport function clearMessage() {\n    return {type: CLEAR_MESSAGE, error: '', success: ''}\n\n}\n\nexport function saveUser(user) {\n    return {type: SAVE_USER, currentUser: user}\n\n}\n export function getUsers(users) {\n     return { type: GET_USERS, users: users }\n }\nexport const axiosGetUsers = (users) => {\n    return dispatch => {\n        axios.get(`${API_URL}/users`,{headers:               {  Authorization: window.localStorage.getItem('token')}\n        })\n            .then(response => {\n                dispatch(getUsers(response.data))\n            })\n            .catch(e => console.log(e))\n    }\n}\nexport const getProfileFetch = () => {\n    return dispatch => {\n        const token = localStorage.token;\n        if (token) {\n            return fetch(`${API_URL}/users`, {\n                method: \"GET\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'application/json',\n                    'Authorization': token\n                }\n            })\n                .then(resp => resp.json())\n                .then(data => {\n                    if (data.message) {\n                        // An error will occur if the token is invalid.\n                        // If this happens, you may want to remove the invalid token.\n                        localStorage.removeItem(\"token\")\n                    } else {\n                        dispatch(loginUser(data.user))\n                    }\n                })\n        }\n    }\n}\nexport const loginUser = (userInfo) => {\n    return {type: LOGIN_AUTHENTICATED, currentUser: {userInfo}, success: 'Login Successful'\n    }\n\n}\n\n\nexport const userLoginFetch = user => {\n    // const { setAuthTokens } = useAuth();\n    // const [isLoggedIn, setLoggedIn] = useState(false);\n\n    return dispatch => {\n        return fetch(`${API_URL}/login`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n                Authorization: window.localStorage.getItem('token')\n            },\n            body: JSON.stringify({user})\n        })\n            .then(resp => resp.json())\n            .then(data => {\n                console.log(data)\n                if (data.failure) {\n                dispatch(authError(data.failure))\n\n                } else {\n                    localStorage.setItem(\"token\", data.jwt)\n                    .history.push('/welcome');                    dispatch(loginUser(data.user))\n                    dispatch(loginSuccess(data.success))\n                }\n            })\n\n    }\n\n}\nexport const authError = error => {\n     return {type: AUTHENTICATION_ERROR, error: error, success: '' }\n}\n\nexport const loginSuccess = success => {\n    return {type: SUCCESS_MESSAGE, success: success }\n}\nexport const authenticated = () => {\n     return {type: AUTHENTICATED}\n}\nexport const userPostFetch = user => {\n    return dispatch => {\n        return fetch(`${API_URL}users`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n                Authorization: window.localStorage.getItem('token')\n\n            },\n            body: JSON.stringify({user})\n        })\n            .then(resp => resp.json())\n            .then(data => {\n                if (data.message) {\n                   console.warn(data.message)\n                } else {\n                    localStorage.setItem(\"token\", data.jwt)\n                    dispatch(saveUser(data.user))\n                    dispatch(loginUser(data.user))\n                }\n            })\n    }\n}\n\n// const loginUser = userObj => ({\n//     type: 'LOGIN_USER',\n//     payload: userObj\n// })"]},"metadata":{},"sourceType":"module"}